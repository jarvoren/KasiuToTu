package pl.mpr.db.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import pl.mpr.db.*;
import pl.mpr.list.*;

public class HsqlAttackDao extends DaoBase<Attack> implements Dao<Attack>{

        
        

		private Statement stmt;
        private PreparedStatement insert;
        private PreparedStatement delete;
        private PreparedStatement update;
        private PreparedStatement getById;
        private PreparedStatement getAll;
        
        
        public HsqlAttackDao(HsqlUnitOfWork uow)
        {
                super(uow);
                try {
                        Connection connection = uow.getConnection();
                        stmt = connection.createStatement();
                        
                        ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
                        
                        boolean exists = false;
                        while(rs.next())
                        {
                                if("Attack".equalsIgnoreCase(rs.getString("TABLE_NAME")))
                                {
                                        exists = true;
                                        break;
                                }
                        }
                        
                        insert = connection.prepareStatement(""
                                        + "INSERT INTO Attack(id, place, organisation)"
                                        + " VALUES(?,?,?)");
                        
                        getById = connection.prepareStatement(""
                                        + "SELECT * FROM Attack WHERE id=?");
                        
                        delete = connection.prepareStatement("DELETE FROM Attack WHERE id=?");
                        
                        getAll = connection.prepareStatement("SELECT * FROM Attack");
                        
                        update = connection.prepareStatement(""
                                        + "update Attack set"
                                        + "(id, place, organisation)=(?,?,?)"
                                        + "where id=?");
                        
                        if(!exists)
                        {
                                stmt.executeUpdate(""
                                                + "CREATE TABLE Attack("
                                                + "id bigint GENERATED BY DEFAULT AS IDENTITY,"
                                                + "id int,"
                                                + "place varchar(50),"
                                                + "organisation varchar(500),"
                                                + ")");
                                
                        }
                } catch (SQLException e) {
                        e.printStackTrace();
                }
                
        }

        @Override
        public void persistAdd(EntityBase entity) {
                
                Attack ent = (Attack)entity;
                try {
                        insert.setInt(1, ent.getId());
                        insert.setString(2, ent.getPlace());
                        insert.setString(3, ent.getOrganisation());
                        insert.executeUpdate();
                        
                } catch (SQLException e) {
                        e.printStackTrace();
                }
                
        }

        @Override
        public void persistDelete(EntityBase entity) {
                Attack ent = (Attack) entity;
                try
                {
                        delete.setInt(1, ent.getId());
                        delete.executeUpdate();

                } catch (SQLException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                }
        }

        @Override
        public List<Attack> getAll() {
                        List<Attack> delikwents = new ArrayList<Attack>();
                
                try
                {
                        ResultSet rs = getAll.executeQuery();
                        while(rs.next()){
                                
                                Attack p = new Attack();
                                p.setId(rs.getInt("id"));
                                p.setPlace(rs.getString("place"));
                                p.setOrganisation(rs.getString("organisation"));
                                delikwents.add(p);
                        }
                }
                
                catch(Exception ex)
                {
                        ex.printStackTrace();
                }
                
                return delikwents;
        }

        @Override
        public Attack get(int id) {
                Attack p = null;
                try {
                        getById.setInt(1, id);
                        ResultSet rs = getById.executeQuery();
                        while(rs.next())
                        {
                                p = new Attack();
                                p.setId(rs.getInt("id"));
                                p.setPlace(rs.getString("place"));
                                p.setOrganisation(rs.getString("organisation"));
                        }
                        
                } catch (SQLException e) {
                        e.printStackTrace();
                }
                
                return p;
        }

        @Override
        public void persistUpdate(EntityBase entity) {
                Attack ent = (Attack) entity;
                try
                {
                		update.setInt(1, ent.getId());
                		update.setString(2, ent.getPlace());
                		update.setString(3, ent.getOrganisation());
                        update.executeUpdate();
                }
                catch(Exception ex)
                {
                        ex.printStackTrace();
                }
                
        }


        
        
}